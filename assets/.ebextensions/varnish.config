packages:
  yum:
    varnish: []
files:
  "/etc/security/limits.d/varnish.conf":
    mode: "000444"
    owner: root
    group: root
    content: |
      # Varnish requires certain ulimits. If we don't define these then Varnish
      # won't start.
      ec2-user hard nofile 131072
      ec2-user soft nofile 131072
      ec2-user hard memlock 82000
      ec2-user soft memlock 82000
      ec2-user hard nproc unlimited
      ec2-user soft nproc unlimited

  "/etc/varnish/default.vcl":
    mode: "000444"
    owner: root
    group: root
    content: |

      # HOST AND PORT.
      ##########################################################################
      backend default {
        .host = "127.0.0.1";
        .port = "81";
      }

      # RECV FUNCTION
      ##########################################################################
      sub vcl_recv {

        # IF PURGE REQUEST CHECK PURGE TOKEN.
        if (req.request == "PURGE") {
          if (req.http.X-Purge-Token == "P54Paqg6cC5OBdWp") {
            return (lookup);
          }
          error 405 "Not allowed";
        }

        # PIPE ALL NON-STANDARD REQUESTS.
        if (req.request != "GET" &&
            req.request != "HEAD" &&
            req.request != "PUT" &&
            req.request != "POST" &&
            req.request != "TRACE" &&
            req.request != "OPTIONS" &&
            req.request != "DELETE"
        ) {
          return (pipe);
        }

        # ONLY CACHE GET AND HEAD REQUESTS.
        if (req.request != "GET" && req.request != "HEAD") {
          return (pass);
        }

        # FORWARD EVERYTHING TO WWW AT HTTPS TO AVOID CACHING HTTP REQUESTS.
        if ((req.http.host ~ "^(?i)(www\.)essycode.com" && req.http.X-Forwarded-Proto !~ "(?i)https") ||
            req.http.host ~ "^(?i)essycode.com"
        ) {
          set req.http.X-Redir-Url = "https://www.essycode.com" + req.url;
          error 750 req.http.X-Redir-Url;
        }

        # NEVER CACHE ADMIN OR LOGIN.
        if (req.url ~ "^/wp-(admin|login|cron)") {
          return (pass);
        }

        # REMOVE GOOGLE ANALYTICS (_*) COOKIES.
        set req.http.Cookie = regsuball(req.http.Cookie, "(^|;\s*)(_[_a-z]+)=[^;]*", "");

        # REMOVE THE WP TEST COOKIE.
        set req.http.Cookie = regsuball(req.http.Cookie, "wordpress_test_cookie=[^;]+(; )?", "");

        # DON'T CACHE IF USER LOGGED IN.
        if (req.http.Cookie ~ "wordpress_") {
          return (pass);
        }

        # UNSET COOKIES IF THEY'VE ALL BEEN REMOVED.
        if (req.http.Cookie == "") {
          unset req.http.Cookie;
        }

        # IF WE MADE IT HERE WE WANT TO SERVE CACHED FILE.
        return (lookup);
      }

      # HIT FUNCTION
      ##########################################################################
      sub vcl_hit {
        # If purge request then purge.
        if (req.request == "PURGE") {
          purge;
          error 200 "Purged";
        }
        return (deliver);
      }

      # MISS FUNCTION
      ##########################################################################
      sub vcl_miss {
        if (req.request == "PURGE") {
          purge;
          error 200 "Purged";
        }
        return (fetch);
      }

      # FETCH FUNCTION
      ##########################################################################
      sub vcl_fetch {
        set beresp.ttl = 1h;
      }

      # DELIVER FUNCTION
      ##########################################################################
      sub vcl_deliver {

        # If page is cached return a hit in header, else a miss.
        if (obj.hits > 0) {
          set resp.http.X-Cache = "HIT";
        }
        else {
          set resp.http.X-Cache = "MISS";
        }

        # May as well hide the server while we're here.
        unset resp.http.Server;
      }

      # ERROR FUNCTION
      ##########################################################################
      sub vcl_error {

        # HANDLE HTTPS REDIRECT.
        if (obj.status == 750) {
          set obj.http.Location = obj.response;
          set obj.status = 301;
          return (deliver);
        }
      }

commands:
  010_httpd.conf:
    command: "sed -i 's/Listen 8080/Listen 80/g' /etc/httpd/conf/httpd.conf"
  011_httpd.conf:
    command: "sed -i 's/Listen 80/Listen 81/g' /etc/httpd/conf/httpd.conf"
  040_varnish:
    command: "sed -i 's/VARNISH_LISTEN_PORT=6081/VARNISH_LISTEN_PORT=80/g' /etc/sysconfig/varnish"
  041_varnish:
    command: "sed -i 's/VARNISH_ADMIN_LISTEN_PORT=6082/VARNISH_ADMIN_LISTEN_PORT=2000/g' /etc/sysconfig/varnish"

services:
  sysvinit:
    varnish:
      enabled: true
      ensureRunning: true
      commands: 041_varnish
